<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>React 技术栈</title>
      <link href="/archives/4a9b.html"/>
      <url>/archives/4a9b.html</url>
      <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="security">  <div class="input-container">  <input type="password" class="form-control" id="pass" placeholder="这是篇有密码的博客" />    <label for="pass">这是篇有密码的博客</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React 设计思想</title>
      <link href="/archives/7615.html"/>
      <url>/archives/7615.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Jul 31 2018 09:41:47 GMT+0800 (中国标准时间) --><h1 id="React-设计思想"><a href="#React-设计思想" class="headerlink" title="React 设计思想"></a>React 设计思想</h1><blockquote><p>译者序：本文是 React 核心开发者、有 React API 终结者之称的 Sebastian Markbåge 撰写，阐述了他设计 React 的初衷。阅读此文，你能站在更高的高度思考 React 的过去、现在和未来。原文地址：<a href="https://github.com/reactjs/react-basic" target="_blank" rel="noopener">https://github.com/reactjs/react-basic</a></p></blockquote><a id="more"></a><p>我写此文是想正式地阐述我心中 React 的<a href="http://baike.baidu.com/view/2333986.htm" target="_blank" rel="noopener">心智模型</a>。目的是解释为什么我们会这样设计 React，同时你也可以根据这些论点反推出 React。</p><p>不可否认，此文中的部分论据或前提尚存争议，而且部分示例的设计可能存在 bug 或疏忽。这只是正式确定它的最初阶段。如果你有更好的完善它的想法可以随时提交 pull request。本文不会介绍框架细节中的奇技淫巧，相信这样能提纲挈领，让你看清 React 由简单到复杂的设计过程。</p><p>React.js 的真实实现中充满了具体问题的解决方案，渐进式的解法，算法优化，历史遗留代码，debug 工具以及其他一些可以让它真的具有高可用性的内容。这些代码可能并不稳定，因为未来浏览器的变化和功能权重的变化随时面临改变。所以具体的代码很难彻底解释清楚。</p><p>我偏向于选择一种我能完全 hold 住的简洁的心智模型来作介绍。</p><h2 id="变换（Transformation）"><a href="#变换（Transformation）" class="headerlink" title="变换（Transformation）"></a>变换（Transformation）</h2><p>设计 React 的核心前提是认为 UI 只是把数据通过映射关系变换成另一种形式的数据。同样的输入必会有同样的输出。这恰好就是纯函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NameBox</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">fontWeight</span>: <span class="string">'bold'</span>, <span class="attr">labelContent</span>: name &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;Sebastian Markbåge&apos; -&gt;</span><br><span class="line">&#123; fontWeight: &apos;bold&apos;, labelContent: &apos;Sebastian Markbåge&apos; &#125;;</span><br></pre></td></tr></table></figure><h2 id="抽象（Abstraction）"><a href="#抽象（Abstraction）" class="headerlink" title="抽象（Abstraction）"></a>抽象（Abstraction）</h2><p>你不可能仅用一个函数就能实现复杂的 UI。重要的是，你需要把 UI 抽象成多个隐藏内部细节，又可复用的函数。通过在一个函数中调用另一个函数来实现复杂的 UI，这就是抽象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyUserBox</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    borderStyle: <span class="string">'1px solid blue'</span>,</span><br><span class="line">    childContent: [</span><br><span class="line">      <span class="string">'Name: '</span>,</span><br><span class="line">      NameBox(user.firstName + <span class="string">' '</span> + user.lastName)</span><br><span class="line">    ]</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123; firstName: &apos;Sebastian&apos;, lastName: &apos;Markbåge&apos; &#125; -&gt;</span><br><span class="line">&#123;</span><br><span class="line">  borderStyle: &apos;1px solid blue&apos;,</span><br><span class="line">  childContent: [</span><br><span class="line">    &apos;Name: &apos;,</span><br><span class="line">    &#123; fontWeight: &apos;bold&apos;, labelContent: &apos;Sebastian Markbåge&apos; &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="组合（Composition）"><a href="#组合（Composition）" class="headerlink" title="组合（Composition）"></a>组合（Composition）</h2><p>为了真正达到重用的特性，只重用叶子然后每次都为他们创建一个新的容器是不够的。你还需要可以包含其他抽象的容器再次进行组合。我理解的“组合”就是将两个或者多个不同的抽象合并为一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBox</span>(<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    borderStyle: <span class="string">'1px solid blue'</span>,</span><br><span class="line">    children: children</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserBox</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBox([</span><br><span class="line">    <span class="string">'Name: '</span>,</span><br><span class="line">    NameBox(user.firstName + <span class="string">' '</span> + user.lastName)</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="状态（State）"><a href="#状态（State）" class="headerlink" title="状态（State）"></a>状态（State）</h2><p>UI 不单单是对服务器端或业务逻辑状态的复制。实际上还有很多状态是针对具体的渲染目标。举个例子，在一个 text field 中打字。它不一定要复制到其他页面或者你的手机设备。滚动位置这个状态是一个典型的你几乎不会复制到多个渲染目标的。</p><p>我们倾向于使用不可变的数据模型。我们把可以改变 state 的函数串联起来作为原点放置在顶层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyNameBox</span>(<span class="params">user, likes, onClick</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBox([</span><br><span class="line">    <span class="string">'Name: '</span>, NameBox(user.firstName + <span class="string">' '</span> + user.lastName),</span><br><span class="line">    <span class="string">'Likes: '</span>, LikeBox(likes),</span><br><span class="line">    LikeButton(onClick)</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现细节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> likes = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOneMoreLike</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  likes++;</span><br><span class="line">  rerender();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"></span><br><span class="line">FancyNameBox(</span><br><span class="line">  &#123; <span class="attr">firstName</span>: <span class="string">'Sebastian'</span>, <span class="attr">lastName</span>: <span class="string">'Markbåge'</span> &#125;,</span><br><span class="line">  likes,</span><br><span class="line">  addOneMoreLike</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><em>注意：本例更新状态时会带来副作用（addOneMoreLike 函数中）。我实际的想法是当一个“update”传入时我们返回下一个版本的状态，但那样会比较复杂。此示例待更新</em></p><h2 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h2><p>对于纯函数，使用相同的参数一次次调用未免太浪费资源。我们可以创建一个函数的 memorized 版本，用来追踪最后一个参数和结果。这样如果我们继续使用同样的值，就不需要反复执行它了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoize</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cachedArg;</span><br><span class="line">  <span class="keyword">var</span> cachedResult;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cachedArg === arg) &#123;</span><br><span class="line">      <span class="keyword">return</span> cachedResult;</span><br><span class="line">    &#125;</span><br><span class="line">    cachedArg = arg;</span><br><span class="line">    cachedResult = fn(arg);</span><br><span class="line">    <span class="keyword">return</span> cachedResult;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MemoizedNameBox = memoize(NameBox);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NameAndAgeBox</span>(<span class="params">user, currentTime</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBox([</span><br><span class="line">    <span class="string">'Name: '</span>,</span><br><span class="line">    MemoizedNameBox(user.firstName + <span class="string">' '</span> + user.lastName),</span><br><span class="line">    <span class="string">'Age in milliseconds: '</span>,</span><br><span class="line">    currentTime - user.dateOfBirth</span><br><span class="line">  ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="列表（Lists）"><a href="#列表（Lists）" class="headerlink" title="列表（Lists）"></a>列表（Lists）</h2><p>大部分 UI 都是展示列表数据中不同 item 的列表结构。这是一个天然的层级。</p><p>为了管理列表中的每一个 item 的 state ，我们可以创造一个 Map 容纳具体 item 的 state。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserList</span>(<span class="params">users, likesPerUser, updateUserLikes</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> users.map(<span class="function"><span class="params">user</span> =&gt;</span> FancyNameBox(</span><br><span class="line">    user,</span><br><span class="line">    likesPerUser.get(user.id),</span><br><span class="line">    () =&gt; updateUserLikes(user.id, likesPerUser.get(user.id) + <span class="number">1</span>)</span><br><span class="line">  ));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> likesPerUser = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateUserLikes</span>(<span class="params">id, likeCount</span>) </span>&#123;</span><br><span class="line">  likesPerUser.set(id, likeCount);</span><br><span class="line">  rerender();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UserList(data.users, likesPerUser, updateUserLikes);</span><br></pre></td></tr></table></figure><p><em>注意：现在我们向 FancyNameBox 传了多个不同的参数。这打破了我们的 memoization 因为我们每次只能存储一个值。更多相关内容在下面。</em></p><h2 id="连续性（Continuations）"><a href="#连续性（Continuations）" class="headerlink" title="连续性（Continuations）"></a>连续性（Continuations）</h2><p>不幸的是，自从 UI 中有太多的列表，明确的管理就需要大量的重复性样板代码。</p><p>我们可以通过推迟一些函数的执行，进而把一些模板移出业务逻辑。比如，使用“柯里化”（JavaScript 中的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener"><code>bind</code></a>）。然后我们可以从核心的函数外面传递 state，这样就没有样板代码了。</p><p>下面这样并没有减少样板代码，但至少把它从关键业务逻辑中剥离。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyUserList</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBox(</span><br><span class="line">    UserList.bind(<span class="literal">null</span>, users)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> box = FancyUserList(data.users);</span><br><span class="line"><span class="keyword">const</span> resolvedChildren = box.children(likesPerUser, updateUserLikes);</span><br><span class="line"><span class="keyword">const</span> resolvedBox = &#123;</span><br><span class="line">  ...box,</span><br><span class="line">  children: resolvedChildren</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="State-Map"><a href="#State-Map" class="headerlink" title="State Map"></a>State Map</h2><p>之前我们知道可以使用组合避免重复执行相同的东西这样一种重复模式。我们可以把执行和传递 state 逻辑挪动到被复用很多的低层级的函数中去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBoxWithState</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  children,</span></span></span><br><span class="line"><span class="function"><span class="params">  stateMap,</span></span></span><br><span class="line"><span class="function"><span class="params">  updateState</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBox(</span><br><span class="line">    children.map(<span class="function"><span class="params">child</span> =&gt;</span> child.continuation(</span><br><span class="line">      stateMap.get(child.key),</span><br><span class="line">      updateState</span><br><span class="line">    ))</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">UserList</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> users.map(<span class="function"><span class="params">user</span> =&gt;</span> &#123;</span><br><span class="line">    continuation: FancyNameBox.bind(<span class="literal">null</span>, user),</span><br><span class="line">    key: user.id</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyUserList</span>(<span class="params">users</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBoxWithState.bind(<span class="literal">null</span>,</span><br><span class="line">    UserList(users)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> continuation = FancyUserList(data.users);</span><br><span class="line">continuation(likesPerUser, updateUserLikes);</span><br></pre></td></tr></table></figure><h2 id="Memoization-Map"><a href="#Memoization-Map" class="headerlink" title="Memoization Map"></a>Memoization Map</h2><p>一旦我们想在一个 memoization 列表中 memoize 多个 item 就会变得很困难。因为你需要制定复杂的缓存算法来平衡调用频率和内存占有率。</p><p>还好 UI 在同一个位置会相对的稳定。相同的位置一般每次都会接受相同的参数。这样以来，使用一个集合来做 memoization 是一个非常好用的策略。</p><p>我们可以用对待 state 同样的方式，在组合的函数中传递一个 memoization 缓存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoize</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg, memoizationCache</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (memoizationCache.arg === arg) &#123;</span><br><span class="line">      <span class="keyword">return</span> memoizationCache.result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> result = fn(arg);</span><br><span class="line">    memoizationCache.arg = arg;</span><br><span class="line">    memoizationCache.result = result;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBoxWithState</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  children,</span></span></span><br><span class="line"><span class="function"><span class="params">  stateMap,</span></span></span><br><span class="line"><span class="function"><span class="params">  updateState,</span></span></span><br><span class="line"><span class="function"><span class="params">  memoizationCache</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> FancyBox(</span><br><span class="line">    children.map(<span class="function"><span class="params">child</span> =&gt;</span> child.continuation(</span><br><span class="line">      stateMap.get(child.key),</span><br><span class="line">      updateState,</span><br><span class="line">      memoizationCache.get(child.key)</span><br><span class="line">    ))</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MemoizedFancyNameBox = memoize(FancyNameBox);</span><br></pre></td></tr></table></figure><h2 id="代数效应（Algebraic-Effects）"><a href="#代数效应（Algebraic-Effects）" class="headerlink" title="代数效应（Algebraic Effects）"></a>代数效应（Algebraic Effects）</h2><p>多层抽象需要共享琐碎数据时，一层层传递数据非常麻烦。如果能有一种方式可以在多层抽象中快捷地传递数据，同时又不需要牵涉到中间层级，那该有多好。React 中我们把它叫做“context”。</p><p>有时候数据依赖并不是严格按照抽象树自上而下进行。举个例子，在布局算法中，你需要在实现他们的位置之前了解子节点的大小。</p><p>现在，这个例子有一点超纲。我会使用 <a href="http://math.andrej.com/eff/" target="_blank" rel="noopener">代数效应</a> 这个由我发起的 <a href="https://esdiscuss.org/topic/one-shot-delimited-continuations-with-effect-handlers" target="_blank" rel="noopener">ECMAScript 新特性提议</a>。如果你对函数式编程很熟悉，它们 在避免由 monad 强制引入的仪式一样的编码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ThemeBorderColorRequest</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyBox</span>(<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> color = raise <span class="keyword">new</span> ThemeBorderColorRequest();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    borderWidth: <span class="string">'1px'</span>,</span><br><span class="line">    borderColor: color,</span><br><span class="line">    children: children</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">BlueTheme</span>(<span class="params">children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">try</span> &#123;</span><br><span class="line">    children();</span><br><span class="line">  &#125; <span class="keyword">catch</span> effect ThemeBorderColorRequest -&gt; [, continuation] &#123;</span><br><span class="line">    continuation(<span class="string">'blue'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> BlueTheme(</span><br><span class="line">    FancyUserList.bind(<span class="literal">null</span>, data.users)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React中的state和props</title>
      <link href="/archives/992.html"/>
      <url>/archives/992.html</url>
      <content type="html"><![CDATA[<!-- build time:Tue Jul 31 2018 09:41:47 GMT+0800 (中国标准时间) --><p>整理一下React中关于state和props的知识点。</p><hr><p>在任何应用中，数据都是必不可少的。我们需要直接的改变页面上一块的区域来使得视图的刷新，或者间接地改变其他地方的数据。React的数据是自顶向下单向流动的，即从父组件到子组件中，组件的数据存储在<code>props</code>和<code>state</code>中，这两个属性有啥子区别呢？</p><a id="more"></a><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>React的核心思想就是组件化思想，页面会被切分成一些独立的、可复用的组件。</p><p>组件从概念上看就是一个函数，可以接受一个参数作为输入值，这个参数就是<code>props</code>，所以可以把<code>props</code>理解为从外部传入组件内部的数据。由于React是单向数据流，所以<code>props</code>基本上也就是从服父级组件向子组件传递的数据。</p><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>假设我们现在需要实现一个列表，根据React组件化思想，我们可以把列表中的行当做一个组件，也就是有这样两个组件：<code>&lt;ItemList/&gt;</code>和<code>&lt;Item/&gt;</code>。</p><p>先看看<code>&lt;ItemList/&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Item from &quot;./item&quot;;</span><br><span class="line">export default class ItemList extends React.Component&#123;</span><br><span class="line">  const itemList = data.map(item =&gt; &lt;Item item=item /&gt;);</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &#123;itemList&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表的数据我们就暂时先假设是放在一个<code>data</code>变量中，然后通过<code>map</code>函数返回一个每一项都是<code>&lt;Item item=&#39;数据&#39;/&gt;</code>的数组，也就是说这里其实包含了<code>data.length</code>个<code>&lt;Item/&gt;</code>组件，数据通过在组件上自定义一个参数传递。当然，这里想传递几个自定义参数都可以。</p><p>在<code>&lt;Item /&gt;</code>中是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export default class Item extends React.Component&#123;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;li&gt;&#123;this.props.item&#125;&lt;/li&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>render</code>函数中可以看出，组件内部是使用<code>this.props</code>来获取传递到该组件的所有数据，它是一个对象，包含了所有你对这个组件的配置，现在只包含了一个<code>item</code>属性，所以通过<code>this.props.item</code>来获取即可。</p><h3 id="只读性"><a href="#只读性" class="headerlink" title="只读性"></a>只读性</h3><p><code>props</code>经常被用作渲染组件和初始化状态，当一个组件被实例化之后，它的<code>props</code>是只读的，不可改变的。如果<code>props</code>在渲染过程中可以被改变，会导致这个组件显示的形态变得不可预测。只有通过父组件重新渲染的方式才可以把新的<code>props</code>传入组件中。</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>在组件中，我们最好为<code>props</code>中的参数设置一个<code>defaultProps</code>，并且制定它的类型。比如，这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Item.defaultProps = &#123;</span><br><span class="line">  item: &apos;Hello Props&apos;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Item.propTypes = &#123;</span><br><span class="line">  item: PropTypes.string,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>关于<code>propTypes</code>，可以声明为以下几种类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">optionalArray: PropTypes.array,</span><br><span class="line">optionalBool: PropTypes.bool,</span><br><span class="line">optionalFunc: PropTypes.func,</span><br><span class="line">optionalNumber: PropTypes.number,</span><br><span class="line">optionalObject: PropTypes.object,</span><br><span class="line">optionalString: PropTypes.string,</span><br><span class="line">optionalSymbol: PropTypes.symbol,</span><br></pre></td></tr></table></figure><p>注意，<code>bool</code>和<code>func</code>是简写。</p><p>这些知识基础数据类型，还有一些复杂的，附上链接：</p><p><a href="https://facebook.github.io/react/docs/typechecking-with-proptypes.html" target="_blank" rel="noopener">https://facebook.github.io/react/docs/typechecking-with-proptypes.html</a></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>props</code>是一个从外部传进组件的参数，主要作为就是从父组件向子组件传递数据，它具有可读性和不变性，只能通过外部组件主动传入新的<code>props</code>来重新渲染子组件，否则子组件的<code>props</code>以及展现形式不会改变。</p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p><code>state</code>是什么呢？</p><blockquote><p>State is similar to props, but it is private and fully controlled by the component.</p></blockquote><p>一个组件的显示形态可以由数据状态和外部参数所决定，外部参数也就是<code>props</code>，而数据状态就是<code>state</code>。</p><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export default class ItemList extends React.Component&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      itemList:&apos;一些数据&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">      &#123;this.state.itemList&#125;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，在组件初始化的时候，通过<code>this.state</code>给组件设定一个初始的<code>state</code>，在第一次<code>render</code>的时候就会用这个数据来渲染组件。</p><h3 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h3><p><code>state</code>不同于<code>props</code>的一点是，<code>state</code>是可以被改变的。不过，不可以直接通过<code>this.state=</code>的方式来修改，而需要通过<code>this.setState()</code>方法来修改<code>state</code>。</p><p>比如，我们经常会通过异步操作来获取数据，我们需要在<code>didMount</code>阶段来执行异步操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentDidMount()&#123;</span><br><span class="line">  fetch(&apos;url&apos;)</span><br><span class="line">    .then(response =&gt; response.json())</span><br><span class="line">    .then((data) =&gt; &#123;</span><br><span class="line">      this.setState(&#123;itemList:item&#125;);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当数据获取完成后，通过<code>this.setState</code>来修改数据状态。</p><p>当我们调用<code>this.setState</code>方法时，React会更新组件的数据状态<code>state</code>，并且重新调用<code>render</code>方法，也就是会对组件进行重新渲染。</p><p><strong>注意：通过<code>this.state=</code>来初始化<code>state</code>，使用<code>this.setState</code>来修改<code>state</code>，<code>constructor</code>是唯一能够初始化的地方。</strong></p><p><code>setState</code>接受一个对象或者函数作为第一个参数，只需要传入需要更新的部分即可，不需要传入整个对象，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">export default class ItemList extends React.Component&#123;</span><br><span class="line">  constructor()&#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      name:&apos;axuebin&apos;,</span><br><span class="line">      age:25,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  componentDidMount()&#123;</span><br><span class="line">    this.setState(&#123;age:18&#125;)  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在执行完<code>setState</code>之后的<code>state</code>应该是<code>{name:&#39;axuebin&#39;,age:18}</code>。</p><p><code>setState</code>还可以接受第二个参数，它是一个函数，会在<code>setState</code>调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;</span><br><span class="line">  name:&apos;xb&apos;</span><br><span class="line">&#125;,()=&gt;console.log(&apos;setState finished&apos;))</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p><code>state</code>的主要作用是用于组件保存、控制以及修改自己的状态，它只能在<code>constructor</code>中初始化，它算是组件的私有属性，不可通过外部访问和修改，只能通过组件内部的<code>this.setState</code>来修改，修改<code>state</code>属性会导致组件的重新渲染。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li><code>state</code>是组件自己管理数据，控制自己的状态，可变；</li><li><code>props</code>是外部传入的数据参数，不可变；</li><li>没有<code>state</code>的叫做无状态组件，有<code>state</code>的叫做有状态组件；</li><li>多用<code>props</code>，少用<code>state</code>。也就是多写无状态组件。</li></ol><!-- rebuild by neat -->]]></content>
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
